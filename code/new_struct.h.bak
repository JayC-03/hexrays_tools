#pragma once


struct meminfo_t 
{
	qstring name;
	uint64 offset;
	typestring type;
	uint64 size;
	typestring fields;
};

struct scan_info_t
{
	typestring type;
	bool is_VT;
	bool is_protected;	
	scan_info_t():type(), is_VT(false), is_protected(false){}

};

typedef std::map<uval_t, scan_info_t> field_info_t;

struct strtype_info_t:qvector<meminfo_t>
{
	type_t basetype;
	unsigned int N;
	bool __fastcall strtype_info_t::build_udt_type(typestring &restype, typestring &resfields);
};

extern bool can_be_converted_to_ptr(cfunc_t *cfunc, int varidx, strtype_info_t *strinfo);

extern bool can_be_converted_to_ptr2(cfunc_t *cfunc, int varidx, strtype_info_t *strinfo, field_info_t * fields);

extern bool can_be_converted_to_ptr3(cfunc_t *cfunc, int varidx, strtype_info_t *strinfo, field_info_t * fields);